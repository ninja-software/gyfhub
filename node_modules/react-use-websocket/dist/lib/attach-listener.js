"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var socket_io_1 = require("./socket-io");
var constants_1 = require("./constants");
exports.attachListeners = function (webSocketInstance, setters, optionsRef, reconnect, reconnectCount) {
    var setLastMessage = setters.setLastMessage, setReadyState = setters.setReadyState;
    var interval;
    var reconnectTimeout;
    if (optionsRef.current.fromSocketIO) {
        interval = socket_io_1.setUpSocketIOPing(webSocketInstance);
    }
    webSocketInstance.onmessage = function (message) {
        optionsRef.current.onMessage && optionsRef.current.onMessage(message);
        if (typeof optionsRef.current.filter === 'function' && optionsRef.current.filter(message) !== true) {
            return;
        }
        setLastMessage(message);
    };
    webSocketInstance.onopen = function (event) {
        optionsRef.current.onOpen && optionsRef.current.onOpen(event);
        reconnectCount.current = 0;
        setReadyState(constants_1.ReadyState.OPEN);
    };
    webSocketInstance.onclose = function (event) {
        var _a, _b;
        optionsRef.current.onClose && optionsRef.current.onClose(event);
        setReadyState(constants_1.ReadyState.CLOSED);
        if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {
            var reconnectAttempts = (_a = optionsRef.current.reconnectAttempts, (_a !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT));
            if (reconnectCount.current < reconnectAttempts) {
                reconnectTimeout = setTimeout(function () {
                    reconnectCount.current++;
                    reconnect();
                }, (_b = optionsRef.current.reconnectInterval, (_b !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS)));
            }
            else {
                console.error("Max reconnect attempts of " + reconnectAttempts + " exceeded");
            }
        }
    };
    webSocketInstance.onerror = function (error) {
        var _a, _b;
        optionsRef.current.onError && optionsRef.current.onError(error);
        if (optionsRef.current.retryOnError) {
            if (reconnectCount.current < (_a = optionsRef.current.reconnectAttempts, (_a !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT))) {
                reconnectTimeout = setTimeout(function () {
                    reconnectCount.current++;
                    reconnect();
                }, (_b = optionsRef.current.reconnectInterval, (_b !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS)));
            }
        }
    };
    return function () {
        setReadyState(constants_1.ReadyState.CLOSING);
        if (reconnectTimeout)
            clearTimeout(reconnectTimeout);
        webSocketInstance.close();
        if (interval)
            clearInterval(interval);
    };
};
//# sourceMappingURL=attach-listener.js.map