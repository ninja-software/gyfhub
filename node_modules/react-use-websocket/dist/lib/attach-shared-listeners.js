"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("./globals");
var constants_1 = require("./constants");
var manage_subscribers_1 = require("./manage-subscribers");
exports.attachSharedListeners = function (webSocketInstance, url) {
    webSocketInstance.onmessage = function (message) {
        manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {
            if (subscriber.optionsRef.current.onMessage) {
                subscriber.optionsRef.current.onMessage(message);
            }
            if (typeof subscriber.optionsRef.current.filter === 'function' &&
                subscriber.optionsRef.current.filter(message) !== true) {
                return;
            }
            subscriber.setLastMessage(message);
        });
    };
    webSocketInstance.onclose = function (event) {
        manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {
            if (subscriber.optionsRef.current.onClose) {
                subscriber.optionsRef.current.onClose(event);
            }
            subscriber.setReadyState(constants_1.ReadyState.CLOSED);
        });
        delete globals_1.sharedWebSockets[url];
        manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {
            var _a, _b;
            if (subscriber.optionsRef.current.shouldReconnect &&
                subscriber.optionsRef.current.shouldReconnect(event)) {
                var reconnectAttempts = (_a = subscriber.optionsRef.current.reconnectAttempts, (_a !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT));
                if (subscriber.reconnectCount.current < reconnectAttempts) {
                    if (subscriber.reconnectCount.current++ === 0) {
                        subscriber.reconnect.current();
                    }
                    else {
                        setTimeout(function () {
                            subscriber.reconnect.current();
                        }, (_b = subscriber.optionsRef.current.reconnectInterval, (_b !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS)));
                    }
                }
                else {
                    console.error("Max reconnect attempts of " + reconnectAttempts + " exceeded");
                }
            }
        });
    };
    webSocketInstance.onerror = function (error) {
        manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {
            if (subscriber.optionsRef.current.onError) {
                subscriber.optionsRef.current.onError(error);
            }
        });
    };
    webSocketInstance.onopen = function (event) {
        manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {
            subscriber.reconnectCount.current = 0;
            if (subscriber.optionsRef.current.onOpen) {
                subscriber.optionsRef.current.onOpen(event);
            }
            subscriber.setReadyState(constants_1.ReadyState.OPEN);
        });
    };
};
//# sourceMappingURL=attach-shared-listeners.js.map