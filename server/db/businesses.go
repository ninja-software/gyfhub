// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Business is an object representing the database table.
type Business struct {
	ID        string    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID   string    `db:"owner_id" boil:"owner_id" json:"ownerID" toml:"ownerID" yaml:"ownerID"`
	Name      string    `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	DeletedAt null.Time `db:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt time.Time `db:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt time.Time `db:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *businessR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L businessL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BusinessColumns = struct {
	ID        string
	OwnerID   string
	Name      string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	OwnerID:   "owner_id",
	Name:      "name",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

// Generated where

var BusinessWhere = struct {
	ID        whereHelperstring
	OwnerID   whereHelperstring
	Name      whereHelperstring
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"businesses\".\"id\""},
	OwnerID:   whereHelperstring{field: "\"businesses\".\"owner_id\""},
	Name:      whereHelperstring{field: "\"businesses\".\"name\""},
	DeletedAt: whereHelpernull_Time{field: "\"businesses\".\"deleted_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"businesses\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"businesses\".\"created_at\""},
}

// BusinessRels is where relationship names are stored.
var BusinessRels = struct {
	Owner         string
	Opportunities string
}{
	Owner:         "Owner",
	Opportunities: "Opportunities",
}

// businessR is where relationships are stored.
type businessR struct {
	Owner         *User            `db:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Opportunities OpportunitySlice `db:"Opportunities" boil:"Opportunities" json:"Opportunities" toml:"Opportunities" yaml:"Opportunities"`
}

// NewStruct creates a new relationship struct
func (*businessR) NewStruct() *businessR {
	return &businessR{}
}

// businessL is where Load methods for each relationship are stored.
type businessL struct{}

var (
	businessAllColumns            = []string{"id", "owner_id", "name", "deleted_at", "updated_at", "created_at"}
	businessColumnsWithoutDefault = []string{"owner_id", "name", "deleted_at"}
	businessColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	businessPrimaryKeyColumns     = []string{"id"}
)

type (
	// BusinessSlice is an alias for a slice of pointers to Business.
	// This should generally be used opposed to []Business.
	BusinessSlice []*Business
	// BusinessHook is the signature for custom Business hook methods
	BusinessHook func(boil.Executor, *Business) error

	businessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	businessType                 = reflect.TypeOf(&Business{})
	businessMapping              = queries.MakeStructMapping(businessType)
	businessPrimaryKeyMapping, _ = queries.BindMapping(businessType, businessMapping, businessPrimaryKeyColumns)
	businessInsertCacheMut       sync.RWMutex
	businessInsertCache          = make(map[string]insertCache)
	businessUpdateCacheMut       sync.RWMutex
	businessUpdateCache          = make(map[string]updateCache)
	businessUpsertCacheMut       sync.RWMutex
	businessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var businessBeforeInsertHooks []BusinessHook
var businessBeforeUpdateHooks []BusinessHook
var businessBeforeDeleteHooks []BusinessHook
var businessBeforeUpsertHooks []BusinessHook

var businessAfterInsertHooks []BusinessHook
var businessAfterSelectHooks []BusinessHook
var businessAfterUpdateHooks []BusinessHook
var businessAfterDeleteHooks []BusinessHook
var businessAfterUpsertHooks []BusinessHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Business) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Business) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range businessBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Business) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range businessBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Business) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Business) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Business) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Business) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Business) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Business) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range businessAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBusinessHook registers your hook function for all future operations.
func AddBusinessHook(hookPoint boil.HookPoint, businessHook BusinessHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		businessBeforeInsertHooks = append(businessBeforeInsertHooks, businessHook)
	case boil.BeforeUpdateHook:
		businessBeforeUpdateHooks = append(businessBeforeUpdateHooks, businessHook)
	case boil.BeforeDeleteHook:
		businessBeforeDeleteHooks = append(businessBeforeDeleteHooks, businessHook)
	case boil.BeforeUpsertHook:
		businessBeforeUpsertHooks = append(businessBeforeUpsertHooks, businessHook)
	case boil.AfterInsertHook:
		businessAfterInsertHooks = append(businessAfterInsertHooks, businessHook)
	case boil.AfterSelectHook:
		businessAfterSelectHooks = append(businessAfterSelectHooks, businessHook)
	case boil.AfterUpdateHook:
		businessAfterUpdateHooks = append(businessAfterUpdateHooks, businessHook)
	case boil.AfterDeleteHook:
		businessAfterDeleteHooks = append(businessAfterDeleteHooks, businessHook)
	case boil.AfterUpsertHook:
		businessAfterUpsertHooks = append(businessAfterUpsertHooks, businessHook)
	}
}

// One returns a single business record from the query.
func (q businessQuery) One(exec boil.Executor) (*Business, error) {
	o := &Business{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for businesses")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Business records from the query.
func (q businessQuery) All(exec boil.Executor) (BusinessSlice, error) {
	var o []*Business

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Business slice")
	}

	if len(businessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Business records in the query.
func (q businessQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count businesses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q businessQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if businesses exists")
	}

	return count > 0, nil
}

// Owner pointed to by the foreign key.
func (o *Business) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Opportunities retrieves all the opportunity's Opportunities with an executor.
func (o *Business) Opportunities(mods ...qm.QueryMod) opportunityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"opportunities\".\"business_id\"=?", o.ID),
	)

	query := Opportunities(queryMods...)
	queries.SetFrom(query.Query, "\"opportunities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"opportunities\".*"})
	}

	return query
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (businessL) LoadOwner(e boil.Executor, singular bool, maybeBusiness interface{}, mods queries.Applicator) error {
	var slice []*Business
	var object *Business

	if singular {
		object = maybeBusiness.(*Business)
	} else {
		slice = *maybeBusiness.(*[]*Business)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &businessR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &businessR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(businessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerBusinesses = append(foreign.R.OwnerBusinesses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerBusinesses = append(foreign.R.OwnerBusinesses, local)
				break
			}
		}
	}

	return nil
}

// LoadOpportunities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (businessL) LoadOpportunities(e boil.Executor, singular bool, maybeBusiness interface{}, mods queries.Applicator) error {
	var slice []*Business
	var object *Business

	if singular {
		object = maybeBusiness.(*Business)
	} else {
		slice = *maybeBusiness.(*[]*Business)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &businessR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &businessR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`opportunities`),
		qm.WhereIn(`opportunities.business_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load opportunities")
	}

	var resultSlice []*Opportunity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice opportunities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on opportunities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for opportunities")
	}

	if len(opportunityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Opportunities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &opportunityR{}
			}
			foreign.R.Business = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BusinessID {
				local.R.Opportunities = append(local.R.Opportunities, foreign)
				if foreign.R == nil {
					foreign.R = &opportunityR{}
				}
				foreign.R.Business = local
				break
			}
		}
	}

	return nil
}

// SetOwner of the business to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerBusinesses.
func (o *Business) SetOwner(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"businesses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, businessPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &businessR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerBusinesses: BusinessSlice{o},
		}
	} else {
		related.R.OwnerBusinesses = append(related.R.OwnerBusinesses, o)
	}

	return nil
}

// AddOpportunities adds the given related objects to the existing relationships
// of the business, optionally inserting them as new records.
// Appends related to o.R.Opportunities.
// Sets related.R.Business appropriately.
func (o *Business) AddOpportunities(exec boil.Executor, insert bool, related ...*Opportunity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"opportunities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"business_id"}),
				strmangle.WhereClause("\"", "\"", 2, opportunityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessID = o.ID
		}
	}

	if o.R == nil {
		o.R = &businessR{
			Opportunities: related,
		}
	} else {
		o.R.Opportunities = append(o.R.Opportunities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &opportunityR{
				Business: o,
			}
		} else {
			rel.R.Business = o
		}
	}
	return nil
}

// Businesses retrieves all the records using an executor.
func Businesses(mods ...qm.QueryMod) businessQuery {
	mods = append(mods, qm.From("\"businesses\""))
	return businessQuery{NewQuery(mods...)}
}

// FindBusiness retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBusiness(exec boil.Executor, iD string, selectCols ...string) (*Business, error) {
	businessObj := &Business{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"businesses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, businessObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from businesses")
	}

	return businessObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Business) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no businesses provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	businessInsertCacheMut.RLock()
	cache, cached := businessInsertCache[key]
	businessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			businessAllColumns,
			businessColumnsWithDefault,
			businessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(businessType, businessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"businesses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"businesses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into businesses")
	}

	if !cached {
		businessInsertCacheMut.Lock()
		businessInsertCache[key] = cache
		businessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Business.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Business) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	businessUpdateCacheMut.RLock()
	cache, cached := businessUpdateCache[key]
	businessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			businessAllColumns,
			businessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update businesses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"businesses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, businessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, append(wl, businessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update businesses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for businesses")
	}

	if !cached {
		businessUpdateCacheMut.Lock()
		businessUpdateCache[key] = cache
		businessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q businessQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for businesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for businesses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BusinessSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"businesses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, businessPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in business slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all business")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Business) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no businesses provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(businessColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	businessUpsertCacheMut.RLock()
	cache, cached := businessUpsertCache[key]
	businessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			businessAllColumns,
			businessColumnsWithDefault,
			businessColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			businessAllColumns,
			businessPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert businesses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(businessPrimaryKeyColumns))
			copy(conflict, businessPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"businesses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(businessType, businessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(businessType, businessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert businesses")
	}

	if !cached {
		businessUpsertCacheMut.Lock()
		businessUpsertCache[key] = cache
		businessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Business record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Business) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Business provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), businessPrimaryKeyMapping)
	sql := "DELETE FROM \"businesses\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from businesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for businesses")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q businessQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no businessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from businesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for businesses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BusinessSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(businessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"businesses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, businessPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from business slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for businesses")
	}

	if len(businessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Business) Reload(exec boil.Executor) error {
	ret, err := FindBusiness(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BusinessSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BusinessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), businessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"businesses\".* FROM \"businesses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, businessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in BusinessSlice")
	}

	*o = slice

	return nil
}

// BusinessExists checks if the Business row exists.
func BusinessExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"businesses\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if businesses exists")
	}

	return exists, nil
}
