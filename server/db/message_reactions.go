// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MessageReaction is an object representing the database table.
type MessageReaction struct {
	ID        string    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MessageID string    `db:"message_id" boil:"message_id" json:"messageID" toml:"messageID" yaml:"messageID"`
	PosterID  string    `db:"poster_id" boil:"poster_id" json:"posterID" toml:"posterID" yaml:"posterID"`
	Reaction  string    `db:"reaction" boil:"reaction" json:"reaction" toml:"reaction" yaml:"reaction"`
	DeletedAt null.Time `db:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt time.Time `db:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt time.Time `db:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *messageReactionR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L messageReactionL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MessageReactionColumns = struct {
	ID        string
	MessageID string
	PosterID  string
	Reaction  string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	MessageID: "message_id",
	PosterID:  "poster_id",
	Reaction:  "reaction",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

// Generated where

var MessageReactionWhere = struct {
	ID        whereHelperstring
	MessageID whereHelperstring
	PosterID  whereHelperstring
	Reaction  whereHelperstring
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"message_reactions\".\"id\""},
	MessageID: whereHelperstring{field: "\"message_reactions\".\"message_id\""},
	PosterID:  whereHelperstring{field: "\"message_reactions\".\"poster_id\""},
	Reaction:  whereHelperstring{field: "\"message_reactions\".\"reaction\""},
	DeletedAt: whereHelpernull_Time{field: "\"message_reactions\".\"deleted_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"message_reactions\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"message_reactions\".\"created_at\""},
}

// MessageReactionRels is where relationship names are stored.
var MessageReactionRels = struct {
	Message string
	Poster  string
}{
	Message: "Message",
	Poster:  "Poster",
}

// messageReactionR is where relationships are stored.
type messageReactionR struct {
	Message *Message `db:"Message" boil:"Message" json:"Message" toml:"Message" yaml:"Message"`
	Poster  *User    `db:"Poster" boil:"Poster" json:"Poster" toml:"Poster" yaml:"Poster"`
}

// NewStruct creates a new relationship struct
func (*messageReactionR) NewStruct() *messageReactionR {
	return &messageReactionR{}
}

// messageReactionL is where Load methods for each relationship are stored.
type messageReactionL struct{}

var (
	messageReactionAllColumns            = []string{"id", "message_id", "poster_id", "reaction", "deleted_at", "updated_at", "created_at"}
	messageReactionColumnsWithoutDefault = []string{"message_id", "poster_id", "reaction", "deleted_at"}
	messageReactionColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	messageReactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// MessageReactionSlice is an alias for a slice of pointers to MessageReaction.
	// This should generally be used opposed to []MessageReaction.
	MessageReactionSlice []*MessageReaction
	// MessageReactionHook is the signature for custom MessageReaction hook methods
	MessageReactionHook func(boil.Executor, *MessageReaction) error

	messageReactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	messageReactionType                 = reflect.TypeOf(&MessageReaction{})
	messageReactionMapping              = queries.MakeStructMapping(messageReactionType)
	messageReactionPrimaryKeyMapping, _ = queries.BindMapping(messageReactionType, messageReactionMapping, messageReactionPrimaryKeyColumns)
	messageReactionInsertCacheMut       sync.RWMutex
	messageReactionInsertCache          = make(map[string]insertCache)
	messageReactionUpdateCacheMut       sync.RWMutex
	messageReactionUpdateCache          = make(map[string]updateCache)
	messageReactionUpsertCacheMut       sync.RWMutex
	messageReactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var messageReactionBeforeInsertHooks []MessageReactionHook
var messageReactionBeforeUpdateHooks []MessageReactionHook
var messageReactionBeforeDeleteHooks []MessageReactionHook
var messageReactionBeforeUpsertHooks []MessageReactionHook

var messageReactionAfterInsertHooks []MessageReactionHook
var messageReactionAfterSelectHooks []MessageReactionHook
var messageReactionAfterUpdateHooks []MessageReactionHook
var messageReactionAfterDeleteHooks []MessageReactionHook
var messageReactionAfterUpsertHooks []MessageReactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MessageReaction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MessageReaction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MessageReaction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MessageReaction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MessageReaction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MessageReaction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MessageReaction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MessageReaction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MessageReaction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range messageReactionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMessageReactionHook registers your hook function for all future operations.
func AddMessageReactionHook(hookPoint boil.HookPoint, messageReactionHook MessageReactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		messageReactionBeforeInsertHooks = append(messageReactionBeforeInsertHooks, messageReactionHook)
	case boil.BeforeUpdateHook:
		messageReactionBeforeUpdateHooks = append(messageReactionBeforeUpdateHooks, messageReactionHook)
	case boil.BeforeDeleteHook:
		messageReactionBeforeDeleteHooks = append(messageReactionBeforeDeleteHooks, messageReactionHook)
	case boil.BeforeUpsertHook:
		messageReactionBeforeUpsertHooks = append(messageReactionBeforeUpsertHooks, messageReactionHook)
	case boil.AfterInsertHook:
		messageReactionAfterInsertHooks = append(messageReactionAfterInsertHooks, messageReactionHook)
	case boil.AfterSelectHook:
		messageReactionAfterSelectHooks = append(messageReactionAfterSelectHooks, messageReactionHook)
	case boil.AfterUpdateHook:
		messageReactionAfterUpdateHooks = append(messageReactionAfterUpdateHooks, messageReactionHook)
	case boil.AfterDeleteHook:
		messageReactionAfterDeleteHooks = append(messageReactionAfterDeleteHooks, messageReactionHook)
	case boil.AfterUpsertHook:
		messageReactionAfterUpsertHooks = append(messageReactionAfterUpsertHooks, messageReactionHook)
	}
}

// One returns a single messageReaction record from the query.
func (q messageReactionQuery) One(exec boil.Executor) (*MessageReaction, error) {
	o := &MessageReaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for message_reactions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MessageReaction records from the query.
func (q messageReactionQuery) All(exec boil.Executor) (MessageReactionSlice, error) {
	var o []*MessageReaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to MessageReaction slice")
	}

	if len(messageReactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MessageReaction records in the query.
func (q messageReactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count message_reactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q messageReactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if message_reactions exists")
	}

	return count > 0, nil
}

// Message pointed to by the foreign key.
func (o *MessageReaction) Message(mods ...qm.QueryMod) messageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MessageID),
	}

	queryMods = append(queryMods, mods...)

	query := Messages(queryMods...)
	queries.SetFrom(query.Query, "\"messages\"")

	return query
}

// Poster pointed to by the foreign key.
func (o *MessageReaction) Poster(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PosterID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadMessage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (messageReactionL) LoadMessage(e boil.Executor, singular bool, maybeMessageReaction interface{}, mods queries.Applicator) error {
	var slice []*MessageReaction
	var object *MessageReaction

	if singular {
		object = maybeMessageReaction.(*MessageReaction)
	} else {
		slice = *maybeMessageReaction.(*[]*MessageReaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &messageReactionR{}
		}
		args = append(args, object.MessageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &messageReactionR{}
			}

			for _, a := range args {
				if a == obj.MessageID {
					continue Outer
				}
			}

			args = append(args, obj.MessageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`messages`),
		qm.WhereIn(`messages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Message")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(messageReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Message = foreign
		if foreign.R == nil {
			foreign.R = &messageR{}
		}
		foreign.R.MessageReactions = append(foreign.R.MessageReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MessageID == foreign.ID {
				local.R.Message = foreign
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.MessageReactions = append(foreign.R.MessageReactions, local)
				break
			}
		}
	}

	return nil
}

// LoadPoster allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (messageReactionL) LoadPoster(e boil.Executor, singular bool, maybeMessageReaction interface{}, mods queries.Applicator) error {
	var slice []*MessageReaction
	var object *MessageReaction

	if singular {
		object = maybeMessageReaction.(*MessageReaction)
	} else {
		slice = *maybeMessageReaction.(*[]*MessageReaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &messageReactionR{}
		}
		args = append(args, object.PosterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &messageReactionR{}
			}

			for _, a := range args {
				if a == obj.PosterID {
					continue Outer
				}
			}

			args = append(args, obj.PosterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(messageReactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Poster = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PosterMessageReactions = append(foreign.R.PosterMessageReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PosterID == foreign.ID {
				local.R.Poster = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PosterMessageReactions = append(foreign.R.PosterMessageReactions, local)
				break
			}
		}
	}

	return nil
}

// SetMessage of the messageReaction to the related item.
// Sets o.R.Message to related.
// Adds o to related.R.MessageReactions.
func (o *MessageReaction) SetMessage(exec boil.Executor, insert bool, related *Message) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"message_reactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"message_id"}),
		strmangle.WhereClause("\"", "\"", 2, messageReactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MessageID = related.ID
	if o.R == nil {
		o.R = &messageReactionR{
			Message: related,
		}
	} else {
		o.R.Message = related
	}

	if related.R == nil {
		related.R = &messageR{
			MessageReactions: MessageReactionSlice{o},
		}
	} else {
		related.R.MessageReactions = append(related.R.MessageReactions, o)
	}

	return nil
}

// SetPoster of the messageReaction to the related item.
// Sets o.R.Poster to related.
// Adds o to related.R.PosterMessageReactions.
func (o *MessageReaction) SetPoster(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"message_reactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"poster_id"}),
		strmangle.WhereClause("\"", "\"", 2, messageReactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PosterID = related.ID
	if o.R == nil {
		o.R = &messageReactionR{
			Poster: related,
		}
	} else {
		o.R.Poster = related
	}

	if related.R == nil {
		related.R = &userR{
			PosterMessageReactions: MessageReactionSlice{o},
		}
	} else {
		related.R.PosterMessageReactions = append(related.R.PosterMessageReactions, o)
	}

	return nil
}

// MessageReactions retrieves all the records using an executor.
func MessageReactions(mods ...qm.QueryMod) messageReactionQuery {
	mods = append(mods, qm.From("\"message_reactions\""))
	return messageReactionQuery{NewQuery(mods...)}
}

// FindMessageReaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMessageReaction(exec boil.Executor, iD string, selectCols ...string) (*MessageReaction, error) {
	messageReactionObj := &MessageReaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"message_reactions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, messageReactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from message_reactions")
	}

	return messageReactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MessageReaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no message_reactions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(messageReactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	messageReactionInsertCacheMut.RLock()
	cache, cached := messageReactionInsertCache[key]
	messageReactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			messageReactionAllColumns,
			messageReactionColumnsWithDefault,
			messageReactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(messageReactionType, messageReactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(messageReactionType, messageReactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"message_reactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"message_reactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into message_reactions")
	}

	if !cached {
		messageReactionInsertCacheMut.Lock()
		messageReactionInsertCache[key] = cache
		messageReactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MessageReaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MessageReaction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	messageReactionUpdateCacheMut.RLock()
	cache, cached := messageReactionUpdateCache[key]
	messageReactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			messageReactionAllColumns,
			messageReactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update message_reactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"message_reactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, messageReactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(messageReactionType, messageReactionMapping, append(wl, messageReactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update message_reactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for message_reactions")
	}

	if !cached {
		messageReactionUpdateCacheMut.Lock()
		messageReactionUpdateCache[key] = cache
		messageReactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q messageReactionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for message_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for message_reactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MessageReactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"message_reactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, messageReactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in messageReaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all messageReaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MessageReaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no message_reactions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(messageReactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	messageReactionUpsertCacheMut.RLock()
	cache, cached := messageReactionUpsertCache[key]
	messageReactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			messageReactionAllColumns,
			messageReactionColumnsWithDefault,
			messageReactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			messageReactionAllColumns,
			messageReactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert message_reactions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(messageReactionPrimaryKeyColumns))
			copy(conflict, messageReactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"message_reactions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(messageReactionType, messageReactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(messageReactionType, messageReactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert message_reactions")
	}

	if !cached {
		messageReactionUpsertCacheMut.Lock()
		messageReactionUpsertCache[key] = cache
		messageReactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MessageReaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MessageReaction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no MessageReaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), messageReactionPrimaryKeyMapping)
	sql := "DELETE FROM \"message_reactions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from message_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for message_reactions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q messageReactionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no messageReactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from message_reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for message_reactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MessageReactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(messageReactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"message_reactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messageReactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from messageReaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for message_reactions")
	}

	if len(messageReactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MessageReaction) Reload(exec boil.Executor) error {
	ret, err := FindMessageReaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MessageReactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MessageReactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageReactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"message_reactions\".* FROM \"message_reactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messageReactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in MessageReactionSlice")
	}

	*o = slice

	return nil
}

// MessageReactionExists checks if the MessageReaction row exists.
func MessageReactionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"message_reactions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if message_reactions exists")
	}

	return exists, nil
}
