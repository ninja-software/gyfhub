// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Follow is an object representing the database table.
type Follow struct {
	UserID     string    `db:"user_id" boil:"user_id" json:"userID" toml:"userID" yaml:"userID"`
	FollowedID string    `db:"followed_id" boil:"followed_id" json:"followedID" toml:"followedID" yaml:"followedID"`
	Amount     int       `db:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	UpdatedAt  time.Time `db:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt  time.Time `db:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *followR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L followL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FollowColumns = struct {
	UserID     string
	FollowedID string
	Amount     string
	UpdatedAt  string
	CreatedAt  string
}{
	UserID:     "user_id",
	FollowedID: "followed_id",
	Amount:     "amount",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var FollowWhere = struct {
	UserID     whereHelperstring
	FollowedID whereHelperstring
	Amount     whereHelperint
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	UserID:     whereHelperstring{field: "\"follow\".\"user_id\""},
	FollowedID: whereHelperstring{field: "\"follow\".\"followed_id\""},
	Amount:     whereHelperint{field: "\"follow\".\"amount\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"follow\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"follow\".\"created_at\""},
}

// FollowRels is where relationship names are stored.
var FollowRels = struct {
	Followed string
	User     string
}{
	Followed: "Followed",
	User:     "User",
}

// followR is where relationships are stored.
type followR struct {
	Followed *User `db:"Followed" boil:"Followed" json:"Followed" toml:"Followed" yaml:"Followed"`
	User     *User `db:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*followR) NewStruct() *followR {
	return &followR{}
}

// followL is where Load methods for each relationship are stored.
type followL struct{}

var (
	followAllColumns            = []string{"user_id", "followed_id", "amount", "updated_at", "created_at"}
	followColumnsWithoutDefault = []string{"user_id", "followed_id", "amount"}
	followColumnsWithDefault    = []string{"updated_at", "created_at"}
	followPrimaryKeyColumns     = []string{"user_id", "followed_id"}
)

type (
	// FollowSlice is an alias for a slice of pointers to Follow.
	// This should generally be used opposed to []Follow.
	FollowSlice []*Follow
	// FollowHook is the signature for custom Follow hook methods
	FollowHook func(boil.Executor, *Follow) error

	followQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	followType                 = reflect.TypeOf(&Follow{})
	followMapping              = queries.MakeStructMapping(followType)
	followPrimaryKeyMapping, _ = queries.BindMapping(followType, followMapping, followPrimaryKeyColumns)
	followInsertCacheMut       sync.RWMutex
	followInsertCache          = make(map[string]insertCache)
	followUpdateCacheMut       sync.RWMutex
	followUpdateCache          = make(map[string]updateCache)
	followUpsertCacheMut       sync.RWMutex
	followUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var followBeforeInsertHooks []FollowHook
var followBeforeUpdateHooks []FollowHook
var followBeforeDeleteHooks []FollowHook
var followBeforeUpsertHooks []FollowHook

var followAfterInsertHooks []FollowHook
var followAfterSelectHooks []FollowHook
var followAfterUpdateHooks []FollowHook
var followAfterDeleteHooks []FollowHook
var followAfterUpsertHooks []FollowHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Follow) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range followBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Follow) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range followBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Follow) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range followBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Follow) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range followBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Follow) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range followAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Follow) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range followAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Follow) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range followAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Follow) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range followAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Follow) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range followAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFollowHook registers your hook function for all future operations.
func AddFollowHook(hookPoint boil.HookPoint, followHook FollowHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		followBeforeInsertHooks = append(followBeforeInsertHooks, followHook)
	case boil.BeforeUpdateHook:
		followBeforeUpdateHooks = append(followBeforeUpdateHooks, followHook)
	case boil.BeforeDeleteHook:
		followBeforeDeleteHooks = append(followBeforeDeleteHooks, followHook)
	case boil.BeforeUpsertHook:
		followBeforeUpsertHooks = append(followBeforeUpsertHooks, followHook)
	case boil.AfterInsertHook:
		followAfterInsertHooks = append(followAfterInsertHooks, followHook)
	case boil.AfterSelectHook:
		followAfterSelectHooks = append(followAfterSelectHooks, followHook)
	case boil.AfterUpdateHook:
		followAfterUpdateHooks = append(followAfterUpdateHooks, followHook)
	case boil.AfterDeleteHook:
		followAfterDeleteHooks = append(followAfterDeleteHooks, followHook)
	case boil.AfterUpsertHook:
		followAfterUpsertHooks = append(followAfterUpsertHooks, followHook)
	}
}

// One returns a single follow record from the query.
func (q followQuery) One(exec boil.Executor) (*Follow, error) {
	o := &Follow{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for follow")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Follow records from the query.
func (q followQuery) All(exec boil.Executor) (FollowSlice, error) {
	var o []*Follow

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Follow slice")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Follow records in the query.
func (q followQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count follow rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q followQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if follow exists")
	}

	return count > 0, nil
}

// Followed pointed to by the foreign key.
func (o *Follow) Followed(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FollowedID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// User pointed to by the foreign key.
func (o *Follow) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadFollowed allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followL) LoadFollowed(e boil.Executor, singular bool, maybeFollow interface{}, mods queries.Applicator) error {
	var slice []*Follow
	var object *Follow

	if singular {
		object = maybeFollow.(*Follow)
	} else {
		slice = *maybeFollow.(*[]*Follow)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &followR{}
		}
		args = append(args, object.FollowedID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followR{}
			}

			for _, a := range args {
				if a == obj.FollowedID {
					continue Outer
				}
			}

			args = append(args, obj.FollowedID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Followed = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FollowedFollows = append(foreign.R.FollowedFollows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FollowedID == foreign.ID {
				local.R.Followed = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowedFollows = append(foreign.R.FollowedFollows, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followL) LoadUser(e boil.Executor, singular bool, maybeFollow interface{}, mods queries.Applicator) error {
	var slice []*Follow
	var object *Follow

	if singular {
		object = maybeFollow.(*Follow)
	} else {
		slice = *maybeFollow.(*[]*Follow)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &followR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Follows = append(foreign.R.Follows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Follows = append(foreign.R.Follows, local)
				break
			}
		}
	}

	return nil
}

// SetFollowed of the follow to the related item.
// Sets o.R.Followed to related.
// Adds o to related.R.FollowedFollows.
func (o *Follow) SetFollowed(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"follow\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"followed_id"}),
		strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.FollowedID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FollowedID = related.ID
	if o.R == nil {
		o.R = &followR{
			Followed: related,
		}
	} else {
		o.R.Followed = related
	}

	if related.R == nil {
		related.R = &userR{
			FollowedFollows: FollowSlice{o},
		}
	} else {
		related.R.FollowedFollows = append(related.R.FollowedFollows, o)
	}

	return nil
}

// SetUser of the follow to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Follows.
func (o *Follow) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"follow\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.FollowedID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &followR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Follows: FollowSlice{o},
		}
	} else {
		related.R.Follows = append(related.R.Follows, o)
	}

	return nil
}

// Follows retrieves all the records using an executor.
func Follows(mods ...qm.QueryMod) followQuery {
	mods = append(mods, qm.From("\"follow\""))
	return followQuery{NewQuery(mods...)}
}

// FindFollow retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFollow(exec boil.Executor, userID string, followedID string, selectCols ...string) (*Follow, error) {
	followObj := &Follow{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"follow\" where \"user_id\"=$1 AND \"followed_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, followedID)

	err := q.Bind(nil, exec, followObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from follow")
	}

	return followObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Follow) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no follow provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(followColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	followInsertCacheMut.RLock()
	cache, cached := followInsertCache[key]
	followInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			followAllColumns,
			followColumnsWithDefault,
			followColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(followType, followMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(followType, followMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"follow\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"follow\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into follow")
	}

	if !cached {
		followInsertCacheMut.Lock()
		followInsertCache[key] = cache
		followInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Follow.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Follow) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	followUpdateCacheMut.RLock()
	cache, cached := followUpdateCache[key]
	followUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			followAllColumns,
			followPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update follow, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"follow\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, followPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(followType, followMapping, append(wl, followPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update follow row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for follow")
	}

	if !cached {
		followUpdateCacheMut.Lock()
		followUpdateCache[key] = cache
		followUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q followQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for follow")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for follow")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FollowSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"follow\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, followPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in follow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all follow")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Follow) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no follow provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(followColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	followUpsertCacheMut.RLock()
	cache, cached := followUpsertCache[key]
	followUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			followAllColumns,
			followColumnsWithDefault,
			followColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			followAllColumns,
			followPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert follow, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(followPrimaryKeyColumns))
			copy(conflict, followPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"follow\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(followType, followMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(followType, followMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert follow")
	}

	if !cached {
		followUpsertCacheMut.Lock()
		followUpsertCache[key] = cache
		followUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Follow record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Follow) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Follow provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), followPrimaryKeyMapping)
	sql := "DELETE FROM \"follow\" WHERE \"user_id\"=$1 AND \"followed_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from follow")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for follow")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q followQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no followQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from follow")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for follow")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FollowSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(followBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"follow\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, followPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from follow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for follow")
	}

	if len(followAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Follow) Reload(exec boil.Executor) error {
	ret, err := FindFollow(exec, o.UserID, o.FollowedID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FollowSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FollowSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"follow\".* FROM \"follow\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, followPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in FollowSlice")
	}

	*o = slice

	return nil
}

// FollowExists checks if the Follow row exists.
func FollowExists(exec boil.Executor, userID string, followedID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"follow\" where \"user_id\"=$1 AND \"followed_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userID, followedID)
	}
	row := exec.QueryRow(sql, userID, followedID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if follow exists")
	}

	return exists, nil
}
