// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Connection is an object representing the database table.
type Connection struct {
	ID         string    `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Status     string    `db:"status" boil:"status" json:"status" toml:"status" yaml:"status"`
	Archived   bool      `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	ArchivedAt null.Time `db:"archived_at" boil:"archived_at" json:"archivedAt,omitempty" toml:"archivedAt" yaml:"archivedAt,omitempty"`
	UpdatedAt  time.Time `db:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt  time.Time `db:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *connectionR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L connectionL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConnectionColumns = struct {
	ID         string
	Status     string
	Archived   string
	ArchivedAt string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "id",
	Status:     "status",
	Archived:   "archived",
	ArchivedAt: "archived_at",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ConnectionWhere = struct {
	ID         whereHelperstring
	Status     whereHelperstring
	Archived   whereHelperbool
	ArchivedAt whereHelpernull_Time
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"connections\".\"id\""},
	Status:     whereHelperstring{field: "\"connections\".\"status\""},
	Archived:   whereHelperbool{field: "\"connections\".\"archived\""},
	ArchivedAt: whereHelpernull_Time{field: "\"connections\".\"archived_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"connections\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"connections\".\"created_at\""},
}

// ConnectionRels is where relationship names are stored.
var ConnectionRels = struct {
	Users string
}{
	Users: "Users",
}

// connectionR is where relationships are stored.
type connectionR struct {
	Users UserSlice `db:"Users" boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*connectionR) NewStruct() *connectionR {
	return &connectionR{}
}

// connectionL is where Load methods for each relationship are stored.
type connectionL struct{}

var (
	connectionAllColumns            = []string{"id", "status", "archived", "archived_at", "updated_at", "created_at"}
	connectionColumnsWithoutDefault = []string{"status", "archived_at"}
	connectionColumnsWithDefault    = []string{"id", "archived", "updated_at", "created_at"}
	connectionPrimaryKeyColumns     = []string{"id"}
)

type (
	// ConnectionSlice is an alias for a slice of pointers to Connection.
	// This should generally be used opposed to []Connection.
	ConnectionSlice []*Connection
	// ConnectionHook is the signature for custom Connection hook methods
	ConnectionHook func(boil.Executor, *Connection) error

	connectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	connectionType                 = reflect.TypeOf(&Connection{})
	connectionMapping              = queries.MakeStructMapping(connectionType)
	connectionPrimaryKeyMapping, _ = queries.BindMapping(connectionType, connectionMapping, connectionPrimaryKeyColumns)
	connectionInsertCacheMut       sync.RWMutex
	connectionInsertCache          = make(map[string]insertCache)
	connectionUpdateCacheMut       sync.RWMutex
	connectionUpdateCache          = make(map[string]updateCache)
	connectionUpsertCacheMut       sync.RWMutex
	connectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var connectionBeforeInsertHooks []ConnectionHook
var connectionBeforeUpdateHooks []ConnectionHook
var connectionBeforeDeleteHooks []ConnectionHook
var connectionBeforeUpsertHooks []ConnectionHook

var connectionAfterInsertHooks []ConnectionHook
var connectionAfterSelectHooks []ConnectionHook
var connectionAfterUpdateHooks []ConnectionHook
var connectionAfterDeleteHooks []ConnectionHook
var connectionAfterUpsertHooks []ConnectionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Connection) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Connection) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Connection) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Connection) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Connection) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Connection) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Connection) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Connection) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Connection) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range connectionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConnectionHook registers your hook function for all future operations.
func AddConnectionHook(hookPoint boil.HookPoint, connectionHook ConnectionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		connectionBeforeInsertHooks = append(connectionBeforeInsertHooks, connectionHook)
	case boil.BeforeUpdateHook:
		connectionBeforeUpdateHooks = append(connectionBeforeUpdateHooks, connectionHook)
	case boil.BeforeDeleteHook:
		connectionBeforeDeleteHooks = append(connectionBeforeDeleteHooks, connectionHook)
	case boil.BeforeUpsertHook:
		connectionBeforeUpsertHooks = append(connectionBeforeUpsertHooks, connectionHook)
	case boil.AfterInsertHook:
		connectionAfterInsertHooks = append(connectionAfterInsertHooks, connectionHook)
	case boil.AfterSelectHook:
		connectionAfterSelectHooks = append(connectionAfterSelectHooks, connectionHook)
	case boil.AfterUpdateHook:
		connectionAfterUpdateHooks = append(connectionAfterUpdateHooks, connectionHook)
	case boil.AfterDeleteHook:
		connectionAfterDeleteHooks = append(connectionAfterDeleteHooks, connectionHook)
	case boil.AfterUpsertHook:
		connectionAfterUpsertHooks = append(connectionAfterUpsertHooks, connectionHook)
	}
}

// One returns a single connection record from the query.
func (q connectionQuery) One(exec boil.Executor) (*Connection, error) {
	o := &Connection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for connections")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Connection records from the query.
func (q connectionQuery) All(exec boil.Executor) (ConnectionSlice, error) {
	var o []*Connection

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Connection slice")
	}

	if len(connectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Connection records in the query.
func (q connectionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count connections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q connectionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if connections exists")
	}

	return count > 0, nil
}

// Users retrieves all the user's Users with an executor.
func (o *Connection) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"users_connections\" on \"users\".\"id\" = \"users_connections\".\"user_id\""),
		qm.Where("\"users_connections\".\"connection_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (connectionL) LoadUsers(e boil.Executor, singular bool, maybeConnection interface{}, mods queries.Applicator) error {
	var slice []*Connection
	var object *Connection

	if singular {
		object = maybeConnection.(*Connection)
	} else {
		slice = *maybeConnection.(*[]*Connection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &connectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &connectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".id, \"users\".email, \"users\".first_name, \"users\".last_name, \"users\".city, \"users\".type, \"users\".avatar_id, \"users\".verified, \"users\".verify_token, \"users\".verify_token_expires, \"users\".require_old_password, \"users\".reset_token, \"users\".reset_token_expires, \"users\".password_hash, \"users\".keywords, \"users\".deleted_at, \"users\".updated_at, \"users\".created_at, \"a\".\"connection_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"users_connections\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"connection_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Email, &one.FirstName, &one.LastName, &one.City, &one.Type, &one.AvatarID, &one.Verified, &one.VerifyToken, &one.VerifyTokenExpires, &one.RequireOldPassword, &one.ResetToken, &one.ResetTokenExpires, &one.PasswordHash, &one.Keywords, &one.DeletedAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Connections = append(foreign.R.Connections, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Connections = append(foreign.R.Connections, local)
				break
			}
		}
	}

	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the connection, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Connections appropriately.
func (o *Connection) AddUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"users_connections\" (\"connection_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &connectionR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Connections: ConnectionSlice{o},
			}
		} else {
			rel.R.Connections = append(rel.R.Connections, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// connection replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Connections's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Connections's Users accordingly.
func (o *Connection) SetUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "delete from \"users_connections\" where \"connection_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromConnectionsSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}
	return o.AddUsers(exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Connections.
func (o *Connection) RemoveUsers(exec boil.Executor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"users_connections\" where \"connection_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromConnectionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromConnectionsSlice(o *Connection, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Connections {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Connections)
			if ln > 1 && i < ln-1 {
				rel.R.Connections[i] = rel.R.Connections[ln-1]
			}
			rel.R.Connections = rel.R.Connections[:ln-1]
			break
		}
	}
}

// Connections retrieves all the records using an executor.
func Connections(mods ...qm.QueryMod) connectionQuery {
	mods = append(mods, qm.From("\"connections\""))
	return connectionQuery{NewQuery(mods...)}
}

// FindConnection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConnection(exec boil.Executor, iD string, selectCols ...string) (*Connection, error) {
	connectionObj := &Connection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"connections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, connectionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from connections")
	}

	return connectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Connection) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no connections provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(connectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	connectionInsertCacheMut.RLock()
	cache, cached := connectionInsertCache[key]
	connectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			connectionAllColumns,
			connectionColumnsWithDefault,
			connectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(connectionType, connectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(connectionType, connectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"connections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"connections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into connections")
	}

	if !cached {
		connectionInsertCacheMut.Lock()
		connectionInsertCache[key] = cache
		connectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Connection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Connection) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	connectionUpdateCacheMut.RLock()
	cache, cached := connectionUpdateCache[key]
	connectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			connectionAllColumns,
			connectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update connections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"connections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, connectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(connectionType, connectionMapping, append(wl, connectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update connections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for connections")
	}

	if !cached {
		connectionUpdateCacheMut.Lock()
		connectionUpdateCache[key] = cache
		connectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q connectionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for connections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConnectionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), connectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, connectionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in connection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all connection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Connection) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no connections provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(connectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	connectionUpsertCacheMut.RLock()
	cache, cached := connectionUpsertCache[key]
	connectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			connectionAllColumns,
			connectionColumnsWithDefault,
			connectionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			connectionAllColumns,
			connectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert connections, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(connectionPrimaryKeyColumns))
			copy(conflict, connectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"connections\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(connectionType, connectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(connectionType, connectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert connections")
	}

	if !cached {
		connectionUpsertCacheMut.Lock()
		connectionUpsertCache[key] = cache
		connectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Connection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Connection) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Connection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), connectionPrimaryKeyMapping)
	sql := "DELETE FROM \"connections\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for connections")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q connectionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no connectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for connections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConnectionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(connectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), connectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, connectionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from connection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for connections")
	}

	if len(connectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Connection) Reload(exec boil.Executor) error {
	ret, err := FindConnection(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConnectionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConnectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), connectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"connections\".* FROM \"connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, connectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ConnectionSlice")
	}

	*o = slice

	return nil
}

// ConnectionExists checks if the Connection row exists.
func ConnectionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"connections\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if connections exists")
	}

	return exists, nil
}
