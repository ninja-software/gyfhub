// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID                 string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Email              string      `db:"email" boil:"email" json:"email" toml:"email" yaml:"email"`
	FirstName          string      `db:"first_name" boil:"first_name" json:"firstName" toml:"firstName" yaml:"firstName"`
	LastName           string      `db:"last_name" boil:"last_name" json:"lastName" toml:"lastName" yaml:"lastName"`
	City               null.String `db:"city" boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Type               string      `db:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	AvatarID           null.String `db:"avatar_id" boil:"avatar_id" json:"avatarID,omitempty" toml:"avatarID" yaml:"avatarID,omitempty"`
	Verified           bool        `db:"verified" boil:"verified" json:"verified" toml:"verified" yaml:"verified"`
	VerifyToken        string      `db:"verify_token" boil:"verify_token" json:"verifyToken" toml:"verifyToken" yaml:"verifyToken"`
	VerifyTokenExpires time.Time   `db:"verify_token_expires" boil:"verify_token_expires" json:"verifyTokenExpires" toml:"verifyTokenExpires" yaml:"verifyTokenExpires"`
	RequireOldPassword bool        `db:"require_old_password" boil:"require_old_password" json:"requireOldPassword" toml:"requireOldPassword" yaml:"requireOldPassword"`
	ResetToken         string      `db:"reset_token" boil:"reset_token" json:"resetToken" toml:"resetToken" yaml:"resetToken"`
	ResetTokenExpires  time.Time   `db:"reset_token_expires" boil:"reset_token_expires" json:"resetTokenExpires" toml:"resetTokenExpires" yaml:"resetTokenExpires"`
	PasswordHash       string      `db:"password_hash" boil:"password_hash" json:"passwordHash" toml:"passwordHash" yaml:"passwordHash"`
	Keywords           null.String `db:"keywords" boil:"keywords" json:"keywords,omitempty" toml:"keywords" yaml:"keywords,omitempty"`
	DeletedAt          null.Time   `db:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt          time.Time   `db:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt          time.Time   `db:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *userR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID                 string
	Email              string
	FirstName          string
	LastName           string
	City               string
	Type               string
	AvatarID           string
	Verified           string
	VerifyToken        string
	VerifyTokenExpires string
	RequireOldPassword string
	ResetToken         string
	ResetTokenExpires  string
	PasswordHash       string
	Keywords           string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "id",
	Email:              "email",
	FirstName:          "first_name",
	LastName:           "last_name",
	City:               "city",
	Type:               "type",
	AvatarID:           "avatar_id",
	Verified:           "verified",
	VerifyToken:        "verify_token",
	VerifyTokenExpires: "verify_token_expires",
	RequireOldPassword: "require_old_password",
	ResetToken:         "reset_token",
	ResetTokenExpires:  "reset_token_expires",
	PasswordHash:       "password_hash",
	Keywords:           "keywords",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
}

// Generated where

var UserWhere = struct {
	ID                 whereHelperstring
	Email              whereHelperstring
	FirstName          whereHelperstring
	LastName           whereHelperstring
	City               whereHelpernull_String
	Type               whereHelperstring
	AvatarID           whereHelpernull_String
	Verified           whereHelperbool
	VerifyToken        whereHelperstring
	VerifyTokenExpires whereHelpertime_Time
	RequireOldPassword whereHelperbool
	ResetToken         whereHelperstring
	ResetTokenExpires  whereHelpertime_Time
	PasswordHash       whereHelperstring
	Keywords           whereHelpernull_String
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"users\".\"id\""},
	Email:              whereHelperstring{field: "\"users\".\"email\""},
	FirstName:          whereHelperstring{field: "\"users\".\"first_name\""},
	LastName:           whereHelperstring{field: "\"users\".\"last_name\""},
	City:               whereHelpernull_String{field: "\"users\".\"city\""},
	Type:               whereHelperstring{field: "\"users\".\"type\""},
	AvatarID:           whereHelpernull_String{field: "\"users\".\"avatar_id\""},
	Verified:           whereHelperbool{field: "\"users\".\"verified\""},
	VerifyToken:        whereHelperstring{field: "\"users\".\"verify_token\""},
	VerifyTokenExpires: whereHelpertime_Time{field: "\"users\".\"verify_token_expires\""},
	RequireOldPassword: whereHelperbool{field: "\"users\".\"require_old_password\""},
	ResetToken:         whereHelperstring{field: "\"users\".\"reset_token\""},
	ResetTokenExpires:  whereHelpertime_Time{field: "\"users\".\"reset_token_expires\""},
	PasswordHash:       whereHelperstring{field: "\"users\".\"password_hash\""},
	Keywords:           whereHelpernull_String{field: "\"users\".\"keywords\""},
	DeletedAt:          whereHelpernull_Time{field: "\"users\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"users\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"users\".\"created_at\""},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	Avatar            string
	FollowerUserUsers string
	FollowedUserUsers string
	IssuedTokens      string
	SenderMessages    string
}{
	Avatar:            "Avatar",
	FollowerUserUsers: "FollowerUserUsers",
	FollowedUserUsers: "FollowedUserUsers",
	IssuedTokens:      "IssuedTokens",
	SenderMessages:    "SenderMessages",
}

// userR is where relationships are stored.
type userR struct {
	Avatar            *Blob            `db:"Avatar" boil:"Avatar" json:"Avatar" toml:"Avatar" yaml:"Avatar"`
	FollowerUserUsers UserSlice        `db:"FollowerUserUsers" boil:"FollowerUserUsers" json:"FollowerUserUsers" toml:"FollowerUserUsers" yaml:"FollowerUserUsers"`
	FollowedUserUsers UserSlice        `db:"FollowedUserUsers" boil:"FollowedUserUsers" json:"FollowedUserUsers" toml:"FollowedUserUsers" yaml:"FollowedUserUsers"`
	IssuedTokens      IssuedTokenSlice `db:"IssuedTokens" boil:"IssuedTokens" json:"IssuedTokens" toml:"IssuedTokens" yaml:"IssuedTokens"`
	SenderMessages    MessageSlice     `db:"SenderMessages" boil:"SenderMessages" json:"SenderMessages" toml:"SenderMessages" yaml:"SenderMessages"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "email", "first_name", "last_name", "city", "type", "avatar_id", "verified", "verify_token", "verify_token_expires", "require_old_password", "reset_token", "reset_token_expires", "password_hash", "keywords", "deleted_at", "updated_at", "created_at"}
	userColumnsWithoutDefault = []string{"email", "first_name", "last_name", "city", "type", "avatar_id", "password_hash", "keywords", "deleted_at"}
	userColumnsWithDefault    = []string{"id", "verified", "verify_token", "verify_token_expires", "require_old_password", "reset_token", "reset_token_expires", "updated_at", "created_at"}
	userPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should generally be used opposed to []User.
	UserSlice []*User
	// UserHook is the signature for custom User hook methods
	UserHook func(boil.Executor, *User) error

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBeforeInsertHooks []UserHook
var userBeforeUpdateHooks []UserHook
var userBeforeDeleteHooks []UserHook
var userBeforeUpsertHooks []UserHook

var userAfterInsertHooks []UserHook
var userAfterSelectHooks []UserHook
var userAfterUpdateHooks []UserHook
var userAfterDeleteHooks []UserHook
var userAfterUpsertHooks []UserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *User) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *User) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *User) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *User) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *User) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *User) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *User) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *User) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *User) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHook registers your hook function for all future operations.
func AddUserHook(hookPoint boil.HookPoint, userHook UserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userBeforeInsertHooks = append(userBeforeInsertHooks, userHook)
	case boil.BeforeUpdateHook:
		userBeforeUpdateHooks = append(userBeforeUpdateHooks, userHook)
	case boil.BeforeDeleteHook:
		userBeforeDeleteHooks = append(userBeforeDeleteHooks, userHook)
	case boil.BeforeUpsertHook:
		userBeforeUpsertHooks = append(userBeforeUpsertHooks, userHook)
	case boil.AfterInsertHook:
		userAfterInsertHooks = append(userAfterInsertHooks, userHook)
	case boil.AfterSelectHook:
		userAfterSelectHooks = append(userAfterSelectHooks, userHook)
	case boil.AfterUpdateHook:
		userAfterUpdateHooks = append(userAfterUpdateHooks, userHook)
	case boil.AfterDeleteHook:
		userAfterDeleteHooks = append(userAfterDeleteHooks, userHook)
	case boil.AfterUpsertHook:
		userAfterUpsertHooks = append(userAfterUpsertHooks, userHook)
	}
}

// One returns a single user record from the query.
func (q userQuery) One(exec boil.Executor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for users")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all User records from the query.
func (q userQuery) All(exec boil.Executor) (UserSlice, error) {
	var o []*User

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to User slice")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if users exists")
	}

	return count > 0, nil
}

// Avatar pointed to by the foreign key.
func (o *User) Avatar(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AvatarID),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// FollowerUserUsers retrieves all the user's Users with an executor via id column.
func (o *User) FollowerUserUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"follower_users_followed_users\" on \"users\".\"id\" = \"follower_users_followed_users\".\"follower_user_id\""),
		qm.Where("\"follower_users_followed_users\".\"followed_user_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// FollowedUserUsers retrieves all the user's Users with an executor via id column.
func (o *User) FollowedUserUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"follower_users_followed_users\" on \"users\".\"id\" = \"follower_users_followed_users\".\"followed_user_id\""),
		qm.Where("\"follower_users_followed_users\".\"follower_user_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// IssuedTokens retrieves all the issued_token's IssuedTokens with an executor.
func (o *User) IssuedTokens(mods ...qm.QueryMod) issuedTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"issued_tokens\".\"user_id\"=?", o.ID),
	)

	query := IssuedTokens(queryMods...)
	queries.SetFrom(query.Query, "\"issued_tokens\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"issued_tokens\".*"})
	}

	return query
}

// SenderMessages retrieves all the message's Messages with an executor via sender_id column.
func (o *User) SenderMessages(mods ...qm.QueryMod) messageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"messages\".\"sender_id\"=?", o.ID),
	)

	query := Messages(queryMods...)
	queries.SetFrom(query.Query, "\"messages\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"messages\".*"})
	}

	return query
}

// LoadAvatar allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadAvatar(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.AvatarID) {
			args = append(args, object.AvatarID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AvatarID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AvatarID) {
				args = append(args, obj.AvatarID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blobs`),
		qm.WhereIn(`blobs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Avatar = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.AvatarUsers = append(foreign.R.AvatarUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AvatarID, foreign.ID) {
				local.R.Avatar = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.AvatarUsers = append(foreign.R.AvatarUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadFollowerUserUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadFollowerUserUsers(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".id, \"users\".email, \"users\".first_name, \"users\".last_name, \"users\".city, \"users\".type, \"users\".avatar_id, \"users\".verified, \"users\".verify_token, \"users\".verify_token_expires, \"users\".require_old_password, \"users\".reset_token, \"users\".reset_token_expires, \"users\".password_hash, \"users\".keywords, \"users\".deleted_at, \"users\".updated_at, \"users\".created_at, \"a\".\"followed_user_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"follower_users_followed_users\" as \"a\" on \"users\".\"id\" = \"a\".\"follower_user_id\""),
		qm.WhereIn("\"a\".\"followed_user_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Email, &one.FirstName, &one.LastName, &one.City, &one.Type, &one.AvatarID, &one.Verified, &one.VerifyToken, &one.VerifyTokenExpires, &one.RequireOldPassword, &one.ResetToken, &one.ResetTokenExpires, &one.PasswordHash, &one.Keywords, &one.DeletedAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FollowerUserUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.FollowedUserUsers = append(foreign.R.FollowedUserUsers, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.FollowerUserUsers = append(local.R.FollowerUserUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowedUserUsers = append(foreign.R.FollowedUserUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadFollowedUserUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadFollowedUserUsers(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".id, \"users\".email, \"users\".first_name, \"users\".last_name, \"users\".city, \"users\".type, \"users\".avatar_id, \"users\".verified, \"users\".verify_token, \"users\".verify_token_expires, \"users\".require_old_password, \"users\".reset_token, \"users\".reset_token_expires, \"users\".password_hash, \"users\".keywords, \"users\".deleted_at, \"users\".updated_at, \"users\".created_at, \"a\".\"follower_user_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"follower_users_followed_users\" as \"a\" on \"users\".\"id\" = \"a\".\"followed_user_id\""),
		qm.WhereIn("\"a\".\"follower_user_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Email, &one.FirstName, &one.LastName, &one.City, &one.Type, &one.AvatarID, &one.Verified, &one.VerifyToken, &one.VerifyTokenExpires, &one.RequireOldPassword, &one.ResetToken, &one.ResetTokenExpires, &one.PasswordHash, &one.Keywords, &one.DeletedAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FollowedUserUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.FollowerUserUsers = append(foreign.R.FollowerUserUsers, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.FollowedUserUsers = append(local.R.FollowedUserUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowerUserUsers = append(foreign.R.FollowerUserUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadIssuedTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIssuedTokens(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`issued_tokens`),
		qm.WhereIn(`issued_tokens.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load issued_tokens")
	}

	var resultSlice []*IssuedToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice issued_tokens")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on issued_tokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for issued_tokens")
	}

	if len(issuedTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IssuedTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &issuedTokenR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.IssuedTokens = append(local.R.IssuedTokens, foreign)
				if foreign.R == nil {
					foreign.R = &issuedTokenR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadSenderMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSenderMessages(e boil.Executor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`messages`),
		qm.WhereIn(`messages.sender_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load messages")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice messages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(messageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SenderMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &messageR{}
			}
			foreign.R.Sender = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SenderID {
				local.R.SenderMessages = append(local.R.SenderMessages, foreign)
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.Sender = local
				break
			}
		}
	}

	return nil
}

// SetAvatar of the user to the related item.
// Sets o.R.Avatar to related.
// Adds o to related.R.AvatarUsers.
func (o *User) SetAvatar(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"avatar_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AvatarID, related.ID)
	if o.R == nil {
		o.R = &userR{
			Avatar: related,
		}
	} else {
		o.R.Avatar = related
	}

	if related.R == nil {
		related.R = &blobR{
			AvatarUsers: UserSlice{o},
		}
	} else {
		related.R.AvatarUsers = append(related.R.AvatarUsers, o)
	}

	return nil
}

// RemoveAvatar relationship.
// Sets o.R.Avatar to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *User) RemoveAvatar(exec boil.Executor, related *Blob) error {
	var err error

	queries.SetScanner(&o.AvatarID, nil)
	if _, err = o.Update(exec, boil.Whitelist("avatar_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Avatar = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AvatarUsers {
		if queries.Equal(o.AvatarID, ri.AvatarID) {
			continue
		}

		ln := len(related.R.AvatarUsers)
		if ln > 1 && i < ln-1 {
			related.R.AvatarUsers[i] = related.R.AvatarUsers[ln-1]
		}
		related.R.AvatarUsers = related.R.AvatarUsers[:ln-1]
		break
	}
	return nil
}

// AddFollowerUserUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FollowerUserUsers.
// Sets related.R.FollowedUserUsers appropriately.
func (o *User) AddFollowerUserUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"follower_users_followed_users\" (\"followed_user_id\", \"follower_user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &userR{
			FollowerUserUsers: related,
		}
	} else {
		o.R.FollowerUserUsers = append(o.R.FollowerUserUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				FollowedUserUsers: UserSlice{o},
			}
		} else {
			rel.R.FollowedUserUsers = append(rel.R.FollowedUserUsers, o)
		}
	}
	return nil
}

// SetFollowerUserUsers removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FollowedUserUsers's FollowerUserUsers accordingly.
// Replaces o.R.FollowerUserUsers with related.
// Sets related.R.FollowedUserUsers's FollowerUserUsers accordingly.
func (o *User) SetFollowerUserUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "delete from \"follower_users_followed_users\" where \"followed_user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeFollowerUserUsersFromFollowedUserUsersSlice(o, related)
	if o.R != nil {
		o.R.FollowerUserUsers = nil
	}
	return o.AddFollowerUserUsers(exec, insert, related...)
}

// RemoveFollowerUserUsers relationships from objects passed in.
// Removes related items from R.FollowerUserUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.FollowedUserUsers.
func (o *User) RemoveFollowerUserUsers(exec boil.Executor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"follower_users_followed_users\" where \"followed_user_id\" = $1 and \"follower_user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeFollowerUserUsersFromFollowedUserUsersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FollowerUserUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.FollowerUserUsers)
			if ln > 1 && i < ln-1 {
				o.R.FollowerUserUsers[i] = o.R.FollowerUserUsers[ln-1]
			}
			o.R.FollowerUserUsers = o.R.FollowerUserUsers[:ln-1]
			break
		}
	}

	return nil
}

func removeFollowerUserUsersFromFollowedUserUsersSlice(o *User, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.FollowedUserUsers {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.FollowedUserUsers)
			if ln > 1 && i < ln-1 {
				rel.R.FollowedUserUsers[i] = rel.R.FollowedUserUsers[ln-1]
			}
			rel.R.FollowedUserUsers = rel.R.FollowedUserUsers[:ln-1]
			break
		}
	}
}

// AddFollowedUserUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.FollowedUserUsers.
// Sets related.R.FollowerUserUsers appropriately.
func (o *User) AddFollowedUserUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"follower_users_followed_users\" (\"follower_user_id\", \"followed_user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &userR{
			FollowedUserUsers: related,
		}
	} else {
		o.R.FollowedUserUsers = append(o.R.FollowedUserUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				FollowerUserUsers: UserSlice{o},
			}
		} else {
			rel.R.FollowerUserUsers = append(rel.R.FollowerUserUsers, o)
		}
	}
	return nil
}

// SetFollowedUserUsers removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FollowerUserUsers's FollowedUserUsers accordingly.
// Replaces o.R.FollowedUserUsers with related.
// Sets related.R.FollowerUserUsers's FollowedUserUsers accordingly.
func (o *User) SetFollowedUserUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "delete from \"follower_users_followed_users\" where \"follower_user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeFollowedUserUsersFromFollowerUserUsersSlice(o, related)
	if o.R != nil {
		o.R.FollowedUserUsers = nil
	}
	return o.AddFollowedUserUsers(exec, insert, related...)
}

// RemoveFollowedUserUsers relationships from objects passed in.
// Removes related items from R.FollowedUserUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.FollowerUserUsers.
func (o *User) RemoveFollowedUserUsers(exec boil.Executor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"follower_users_followed_users\" where \"follower_user_id\" = $1 and \"followed_user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeFollowedUserUsersFromFollowerUserUsersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FollowedUserUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.FollowedUserUsers)
			if ln > 1 && i < ln-1 {
				o.R.FollowedUserUsers[i] = o.R.FollowedUserUsers[ln-1]
			}
			o.R.FollowedUserUsers = o.R.FollowedUserUsers[:ln-1]
			break
		}
	}

	return nil
}

func removeFollowedUserUsersFromFollowerUserUsersSlice(o *User, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.FollowerUserUsers {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.FollowerUserUsers)
			if ln > 1 && i < ln-1 {
				rel.R.FollowerUserUsers[i] = rel.R.FollowerUserUsers[ln-1]
			}
			rel.R.FollowerUserUsers = rel.R.FollowerUserUsers[:ln-1]
			break
		}
	}
}

// AddIssuedTokens adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IssuedTokens.
// Sets related.R.User appropriately.
func (o *User) AddIssuedTokens(exec boil.Executor, insert bool, related ...*IssuedToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"issued_tokens\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, issuedTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IssuedTokens: related,
		}
	} else {
		o.R.IssuedTokens = append(o.R.IssuedTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &issuedTokenR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddSenderMessages adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SenderMessages.
// Sets related.R.Sender appropriately.
func (o *User) AddSenderMessages(exec boil.Executor, insert bool, related ...*Message) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SenderID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"messages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sender_id"}),
				strmangle.WhereClause("\"", "\"", 2, messagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SenderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SenderMessages: related,
		}
	} else {
		o.R.SenderMessages = append(o.R.SenderMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &messageR{
				Sender: o,
			}
		} else {
			rel.R.Sender = o
		}
	}
	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("\"users\""))
	return userQuery{NewQuery(mods...)}
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(exec boil.Executor, iD string, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from users")
	}

	return userObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no users provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into users")
	}

	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no users provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPrimaryKeyColumns))
			copy(conflict, userPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert users")
	}

	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no User provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM \"users\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for users")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for users")
	}

	if len(userAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(exec boil.Executor) error {
	ret, err := FindUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users\".* FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if users exists")
	}

	return exists, nil
}
