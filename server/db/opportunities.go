// Code generated by SQLBoiler 4.3.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Opportunity is an object representing the database table.
type Opportunity struct {
	ID                 string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BusinessID         string      `db:"business_id" boil:"business_id" json:"businessID" toml:"businessID" yaml:"businessID"`
	VideoID            string      `db:"video_id" boil:"video_id" json:"videoID" toml:"videoID" yaml:"videoID"`
	Category           string      `db:"category" boil:"category" json:"category" toml:"category" yaml:"category"`
	Challenge          string      `db:"challenge" boil:"challenge" json:"challenge" toml:"challenge" yaml:"challenge"`
	RoleAfterChallenge string      `db:"role_after_challenge" boil:"role_after_challenge" json:"roleAfterChallenge" toml:"roleAfterChallenge" yaml:"roleAfterChallenge"`
	ConfirmYourCity    string      `db:"confirm_your_city" boil:"confirm_your_city" json:"confirmYourCity" toml:"confirmYourCity" yaml:"confirmYourCity"`
	OpenToRemoteTalent bool        `db:"open_to_remote_talent" boil:"open_to_remote_talent" json:"openToRemoteTalent" toml:"openToRemoteTalent" yaml:"openToRemoteTalent"`
	Keywords           null.String `db:"keywords" boil:"keywords" json:"keywords,omitempty" toml:"keywords" yaml:"keywords,omitempty"`
	DeletedAt          null.Time   `db:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt          time.Time   `db:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt          time.Time   `db:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *opportunityR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L opportunityL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OpportunityColumns = struct {
	ID                 string
	BusinessID         string
	VideoID            string
	Category           string
	Challenge          string
	RoleAfterChallenge string
	ConfirmYourCity    string
	OpenToRemoteTalent string
	Keywords           string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "id",
	BusinessID:         "business_id",
	VideoID:            "video_id",
	Category:           "category",
	Challenge:          "challenge",
	RoleAfterChallenge: "role_after_challenge",
	ConfirmYourCity:    "confirm_your_city",
	OpenToRemoteTalent: "open_to_remote_talent",
	Keywords:           "keywords",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var OpportunityWhere = struct {
	ID                 whereHelperstring
	BusinessID         whereHelperstring
	VideoID            whereHelperstring
	Category           whereHelperstring
	Challenge          whereHelperstring
	RoleAfterChallenge whereHelperstring
	ConfirmYourCity    whereHelperstring
	OpenToRemoteTalent whereHelperbool
	Keywords           whereHelpernull_String
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"opportunities\".\"id\""},
	BusinessID:         whereHelperstring{field: "\"opportunities\".\"business_id\""},
	VideoID:            whereHelperstring{field: "\"opportunities\".\"video_id\""},
	Category:           whereHelperstring{field: "\"opportunities\".\"category\""},
	Challenge:          whereHelperstring{field: "\"opportunities\".\"challenge\""},
	RoleAfterChallenge: whereHelperstring{field: "\"opportunities\".\"role_after_challenge\""},
	ConfirmYourCity:    whereHelperstring{field: "\"opportunities\".\"confirm_your_city\""},
	OpenToRemoteTalent: whereHelperbool{field: "\"opportunities\".\"open_to_remote_talent\""},
	Keywords:           whereHelpernull_String{field: "\"opportunities\".\"keywords\""},
	DeletedAt:          whereHelpernull_Time{field: "\"opportunities\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"opportunities\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"opportunities\".\"created_at\""},
}

// OpportunityRels is where relationship names are stored.
var OpportunityRels = struct {
	Business string
	Video    string
	Users    string
}{
	Business: "Business",
	Video:    "Video",
	Users:    "Users",
}

// opportunityR is where relationships are stored.
type opportunityR struct {
	Business *Business `db:"Business" boil:"Business" json:"Business" toml:"Business" yaml:"Business"`
	Video    *Blob     `db:"Video" boil:"Video" json:"Video" toml:"Video" yaml:"Video"`
	Users    UserSlice `db:"Users" boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*opportunityR) NewStruct() *opportunityR {
	return &opportunityR{}
}

// opportunityL is where Load methods for each relationship are stored.
type opportunityL struct{}

var (
	opportunityAllColumns            = []string{"id", "business_id", "video_id", "category", "challenge", "role_after_challenge", "confirm_your_city", "open_to_remote_talent", "keywords", "deleted_at", "updated_at", "created_at"}
	opportunityColumnsWithoutDefault = []string{"business_id", "video_id", "category", "challenge", "role_after_challenge", "confirm_your_city", "keywords", "deleted_at"}
	opportunityColumnsWithDefault    = []string{"id", "open_to_remote_talent", "updated_at", "created_at"}
	opportunityPrimaryKeyColumns     = []string{"id"}
)

type (
	// OpportunitySlice is an alias for a slice of pointers to Opportunity.
	// This should generally be used opposed to []Opportunity.
	OpportunitySlice []*Opportunity
	// OpportunityHook is the signature for custom Opportunity hook methods
	OpportunityHook func(boil.Executor, *Opportunity) error

	opportunityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	opportunityType                 = reflect.TypeOf(&Opportunity{})
	opportunityMapping              = queries.MakeStructMapping(opportunityType)
	opportunityPrimaryKeyMapping, _ = queries.BindMapping(opportunityType, opportunityMapping, opportunityPrimaryKeyColumns)
	opportunityInsertCacheMut       sync.RWMutex
	opportunityInsertCache          = make(map[string]insertCache)
	opportunityUpdateCacheMut       sync.RWMutex
	opportunityUpdateCache          = make(map[string]updateCache)
	opportunityUpsertCacheMut       sync.RWMutex
	opportunityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var opportunityBeforeInsertHooks []OpportunityHook
var opportunityBeforeUpdateHooks []OpportunityHook
var opportunityBeforeDeleteHooks []OpportunityHook
var opportunityBeforeUpsertHooks []OpportunityHook

var opportunityAfterInsertHooks []OpportunityHook
var opportunityAfterSelectHooks []OpportunityHook
var opportunityAfterUpdateHooks []OpportunityHook
var opportunityAfterDeleteHooks []OpportunityHook
var opportunityAfterUpsertHooks []OpportunityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Opportunity) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Opportunity) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Opportunity) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Opportunity) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Opportunity) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Opportunity) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Opportunity) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Opportunity) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Opportunity) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range opportunityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOpportunityHook registers your hook function for all future operations.
func AddOpportunityHook(hookPoint boil.HookPoint, opportunityHook OpportunityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		opportunityBeforeInsertHooks = append(opportunityBeforeInsertHooks, opportunityHook)
	case boil.BeforeUpdateHook:
		opportunityBeforeUpdateHooks = append(opportunityBeforeUpdateHooks, opportunityHook)
	case boil.BeforeDeleteHook:
		opportunityBeforeDeleteHooks = append(opportunityBeforeDeleteHooks, opportunityHook)
	case boil.BeforeUpsertHook:
		opportunityBeforeUpsertHooks = append(opportunityBeforeUpsertHooks, opportunityHook)
	case boil.AfterInsertHook:
		opportunityAfterInsertHooks = append(opportunityAfterInsertHooks, opportunityHook)
	case boil.AfterSelectHook:
		opportunityAfterSelectHooks = append(opportunityAfterSelectHooks, opportunityHook)
	case boil.AfterUpdateHook:
		opportunityAfterUpdateHooks = append(opportunityAfterUpdateHooks, opportunityHook)
	case boil.AfterDeleteHook:
		opportunityAfterDeleteHooks = append(opportunityAfterDeleteHooks, opportunityHook)
	case boil.AfterUpsertHook:
		opportunityAfterUpsertHooks = append(opportunityAfterUpsertHooks, opportunityHook)
	}
}

// One returns a single opportunity record from the query.
func (q opportunityQuery) One(exec boil.Executor) (*Opportunity, error) {
	o := &Opportunity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for opportunities")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Opportunity records from the query.
func (q opportunityQuery) All(exec boil.Executor) (OpportunitySlice, error) {
	var o []*Opportunity

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Opportunity slice")
	}

	if len(opportunityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Opportunity records in the query.
func (q opportunityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count opportunities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q opportunityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if opportunities exists")
	}

	return count > 0, nil
}

// Business pointed to by the foreign key.
func (o *Opportunity) Business(mods ...qm.QueryMod) businessQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BusinessID),
	}

	queryMods = append(queryMods, mods...)

	query := Businesses(queryMods...)
	queries.SetFrom(query.Query, "\"businesses\"")

	return query
}

// Video pointed to by the foreign key.
func (o *Opportunity) Video(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VideoID),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// Users retrieves all the user's Users with an executor.
func (o *Opportunity) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"users_opportunities\" on \"users\".\"id\" = \"users_opportunities\".\"user_id\""),
		qm.Where("\"users_opportunities\".\"opportunity_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadBusiness allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (opportunityL) LoadBusiness(e boil.Executor, singular bool, maybeOpportunity interface{}, mods queries.Applicator) error {
	var slice []*Opportunity
	var object *Opportunity

	if singular {
		object = maybeOpportunity.(*Opportunity)
	} else {
		slice = *maybeOpportunity.(*[]*Opportunity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &opportunityR{}
		}
		args = append(args, object.BusinessID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &opportunityR{}
			}

			for _, a := range args {
				if a == obj.BusinessID {
					continue Outer
				}
			}

			args = append(args, obj.BusinessID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`businesses`),
		qm.WhereIn(`businesses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Business")
	}

	var resultSlice []*Business
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Business")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for businesses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for businesses")
	}

	if len(opportunityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Business = foreign
		if foreign.R == nil {
			foreign.R = &businessR{}
		}
		foreign.R.Opportunities = append(foreign.R.Opportunities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessID == foreign.ID {
				local.R.Business = foreign
				if foreign.R == nil {
					foreign.R = &businessR{}
				}
				foreign.R.Opportunities = append(foreign.R.Opportunities, local)
				break
			}
		}
	}

	return nil
}

// LoadVideo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (opportunityL) LoadVideo(e boil.Executor, singular bool, maybeOpportunity interface{}, mods queries.Applicator) error {
	var slice []*Opportunity
	var object *Opportunity

	if singular {
		object = maybeOpportunity.(*Opportunity)
	} else {
		slice = *maybeOpportunity.(*[]*Opportunity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &opportunityR{}
		}
		args = append(args, object.VideoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &opportunityR{}
			}

			for _, a := range args {
				if a == obj.VideoID {
					continue Outer
				}
			}

			args = append(args, obj.VideoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blobs`),
		qm.WhereIn(`blobs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(opportunityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Video = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.VideoOpportunities = append(foreign.R.VideoOpportunities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VideoID == foreign.ID {
				local.R.Video = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.VideoOpportunities = append(foreign.R.VideoOpportunities, local)
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (opportunityL) LoadUsers(e boil.Executor, singular bool, maybeOpportunity interface{}, mods queries.Applicator) error {
	var slice []*Opportunity
	var object *Opportunity

	if singular {
		object = maybeOpportunity.(*Opportunity)
	} else {
		slice = *maybeOpportunity.(*[]*Opportunity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &opportunityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &opportunityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".id, \"users\".email, \"users\".first_name, \"users\".last_name, \"users\".type, \"users\".city, \"users\".australian_business_number, \"users\".avatar_id, \"users\".verified, \"users\".verify_token, \"users\".verify_token_expires, \"users\".require_old_password, \"users\".reset_token, \"users\".reset_token_expires, \"users\".password_hash, \"users\".keywords, \"users\".deleted_at, \"users\".updated_at, \"users\".created_at, \"a\".\"opportunity_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"users_opportunities\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"opportunity_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []string
	for results.Next() {
		one := new(User)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Email, &one.FirstName, &one.LastName, &one.Type, &one.City, &one.AustralianBusinessNumber, &one.AvatarID, &one.Verified, &one.VerifyToken, &one.VerifyTokenExpires, &one.RequireOldPassword, &one.ResetToken, &one.ResetTokenExpires, &one.PasswordHash, &one.Keywords, &one.DeletedAt, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Opportunities = append(foreign.R.Opportunities, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Opportunities = append(foreign.R.Opportunities, local)
				break
			}
		}
	}

	return nil
}

// SetBusiness of the opportunity to the related item.
// Sets o.R.Business to related.
// Adds o to related.R.Opportunities.
func (o *Opportunity) SetBusiness(exec boil.Executor, insert bool, related *Business) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"opportunities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"business_id"}),
		strmangle.WhereClause("\"", "\"", 2, opportunityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessID = related.ID
	if o.R == nil {
		o.R = &opportunityR{
			Business: related,
		}
	} else {
		o.R.Business = related
	}

	if related.R == nil {
		related.R = &businessR{
			Opportunities: OpportunitySlice{o},
		}
	} else {
		related.R.Opportunities = append(related.R.Opportunities, o)
	}

	return nil
}

// SetVideo of the opportunity to the related item.
// Sets o.R.Video to related.
// Adds o to related.R.VideoOpportunities.
func (o *Opportunity) SetVideo(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"opportunities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"video_id"}),
		strmangle.WhereClause("\"", "\"", 2, opportunityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VideoID = related.ID
	if o.R == nil {
		o.R = &opportunityR{
			Video: related,
		}
	} else {
		o.R.Video = related
	}

	if related.R == nil {
		related.R = &blobR{
			VideoOpportunities: OpportunitySlice{o},
		}
	} else {
		related.R.VideoOpportunities = append(related.R.VideoOpportunities, o)
	}

	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the opportunity, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Opportunities appropriately.
func (o *Opportunity) AddUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"users_opportunities\" (\"opportunity_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &opportunityR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Opportunities: OpportunitySlice{o},
			}
		} else {
			rel.R.Opportunities = append(rel.R.Opportunities, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// opportunity replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Opportunities's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Opportunities's Users accordingly.
func (o *Opportunity) SetUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "delete from \"users_opportunities\" where \"opportunity_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromOpportunitiesSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}
	return o.AddUsers(exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Opportunities.
func (o *Opportunity) RemoveUsers(exec boil.Executor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"users_opportunities\" where \"opportunity_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromOpportunitiesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromOpportunitiesSlice(o *Opportunity, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Opportunities {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Opportunities)
			if ln > 1 && i < ln-1 {
				rel.R.Opportunities[i] = rel.R.Opportunities[ln-1]
			}
			rel.R.Opportunities = rel.R.Opportunities[:ln-1]
			break
		}
	}
}

// Opportunities retrieves all the records using an executor.
func Opportunities(mods ...qm.QueryMod) opportunityQuery {
	mods = append(mods, qm.From("\"opportunities\""))
	return opportunityQuery{NewQuery(mods...)}
}

// FindOpportunity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOpportunity(exec boil.Executor, iD string, selectCols ...string) (*Opportunity, error) {
	opportunityObj := &Opportunity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"opportunities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, opportunityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from opportunities")
	}

	return opportunityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Opportunity) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no opportunities provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(opportunityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	opportunityInsertCacheMut.RLock()
	cache, cached := opportunityInsertCache[key]
	opportunityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			opportunityAllColumns,
			opportunityColumnsWithDefault,
			opportunityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(opportunityType, opportunityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(opportunityType, opportunityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"opportunities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"opportunities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into opportunities")
	}

	if !cached {
		opportunityInsertCacheMut.Lock()
		opportunityInsertCache[key] = cache
		opportunityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Opportunity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Opportunity) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	opportunityUpdateCacheMut.RLock()
	cache, cached := opportunityUpdateCache[key]
	opportunityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			opportunityAllColumns,
			opportunityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update opportunities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"opportunities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, opportunityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(opportunityType, opportunityMapping, append(wl, opportunityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update opportunities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for opportunities")
	}

	if !cached {
		opportunityUpdateCacheMut.Lock()
		opportunityUpdateCache[key] = cache
		opportunityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q opportunityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for opportunities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for opportunities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OpportunitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), opportunityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"opportunities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, opportunityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in opportunity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all opportunity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Opportunity) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no opportunities provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(opportunityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	opportunityUpsertCacheMut.RLock()
	cache, cached := opportunityUpsertCache[key]
	opportunityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			opportunityAllColumns,
			opportunityColumnsWithDefault,
			opportunityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			opportunityAllColumns,
			opportunityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert opportunities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(opportunityPrimaryKeyColumns))
			copy(conflict, opportunityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"opportunities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(opportunityType, opportunityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(opportunityType, opportunityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert opportunities")
	}

	if !cached {
		opportunityUpsertCacheMut.Lock()
		opportunityUpsertCache[key] = cache
		opportunityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Opportunity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Opportunity) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Opportunity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), opportunityPrimaryKeyMapping)
	sql := "DELETE FROM \"opportunities\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from opportunities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for opportunities")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q opportunityQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no opportunityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from opportunities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for opportunities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OpportunitySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(opportunityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), opportunityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"opportunities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, opportunityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from opportunity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for opportunities")
	}

	if len(opportunityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Opportunity) Reload(exec boil.Executor) error {
	ret, err := FindOpportunity(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OpportunitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OpportunitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), opportunityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"opportunities\".* FROM \"opportunities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, opportunityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in OpportunitySlice")
	}

	*o = slice

	return nil
}

// OpportunityExists checks if the Opportunity row exists.
func OpportunityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"opportunities\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if opportunities exists")
	}

	return exists, nil
}
